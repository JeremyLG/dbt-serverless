{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"<code>dbt-serverless</code> User Guide","text":"<p>Info</p> <p>For more information on how this was built and deployed, as well as other Python best practices, see <code>dbt-serverless</code>.</p> <p>Info</p> <p>This user guide is purely an illustrative example that shows off several features of  Material for MkDocs and included Markdown extensions1.</p>"},{"location":"#installation","title":"Installation","text":"<p>First, install Poetry:</p> Linux/macOSWindows <pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre> <pre><code>(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -\n</code></pre> <p>Then install the <code>fact</code> package and its dependencies:</p> <pre><code>poetry install\n</code></pre> <p>Activate the virtual environment created automatically by Poetry:</p> <pre><code>poetry shell\n</code></pre> <ol> <li> <p>See <code>dbt-serverless</code>'s <code>mkdocs.yml</code> for how to enable these features.\u00a0\u21a9</p> </li> </ol>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>lib<ul> <li>file_helpers</li> <li>subprocess_helpers</li> </ul> </li> <li>main</li> </ul>"},{"location":"reference/main/","title":"main","text":""},{"location":"reference/main/#main.DBT_COMMAND_SUFFIX","title":"<code>DBT_COMMAND_SUFFIX = f' --project-dir {DBT_PROJECT}/ --profiles-dir {DBT_PROFILES_DIR}'</code>  <code>module-attribute</code>","text":""},{"location":"reference/main/#main.DBT_PROFILES_DIR","title":"<code>DBT_PROFILES_DIR = environ.get('DBT_PROFILES_DIR')</code>  <code>module-attribute</code>","text":""},{"location":"reference/main/#main.DBT_PROJECT","title":"<code>DBT_PROJECT = environ.get('DBT_PROJECT')</code>  <code>module-attribute</code>","text":""},{"location":"reference/main/#main.DEBUG_COMMAND","title":"<code>DEBUG_COMMAND = 'dbt debug' + DBT_COMMAND_SUFFIX</code>  <code>module-attribute</code>","text":""},{"location":"reference/main/#main.DEPS_COMMAND","title":"<code>DEPS_COMMAND = 'dbt deps' + DBT_COMMAND_SUFFIX</code>  <code>module-attribute</code>","text":""},{"location":"reference/main/#main.DOCS_COMMAND","title":"<code>DOCS_COMMAND = 'dbt docs generate' + DBT_COMMAND_SUFFIX</code>  <code>module-attribute</code>","text":""},{"location":"reference/main/#main.RUN_COMMAND","title":"<code>RUN_COMMAND = 'dbt run -t {ENV}' + DBT_COMMAND_SUFFIX</code>  <code>module-attribute</code>","text":""},{"location":"reference/main/#main.app","title":"<code>app = FastAPI()</code>  <code>module-attribute</code>","text":""},{"location":"reference/main/#main.debug","title":"<code>debug() -&gt; str</code>  <code>async</code>","text":"Source code in <code>dbt_serverless/main.py</code> <pre><code>@app.get(\"/debug\", response_class=PlainTextResponse)\nasync def debug() -&gt; str:\n    _, lines = await execute_and_log_command(DEBUG_COMMAND)\n    return lines\n</code></pre>"},{"location":"reference/main/#main.deps","title":"<code>deps() -&gt; str</code>  <code>async</code>","text":"Source code in <code>dbt_serverless/main.py</code> <pre><code>@app.get(\"/deps\", response_class=PlainTextResponse)\nasync def deps() -&gt; str:\n    _, lines = await execute_and_log_command(DEPS_COMMAND)\n    return lines\n</code></pre>"},{"location":"reference/main/#main.docs","title":"<code>docs() -&gt; str</code>  <code>async</code>","text":"Source code in <code>dbt_serverless/main.py</code> <pre><code>@app.get(\"/docs_serve\")\nasync def docs() -&gt; str:\n    await execute_and_log_command(DOCS_COMMAND)\n\n    logging.info(\"Merging files into a single one for gcs static serving\")\n\n    content_index = read_file(f\"{DBT_PROJECT}/target/index.html\")\n    json_manifest = read_json_file(f\"{DBT_PROJECT}/target/manifest.json\")\n    json_catalog = read_json_file(f\"{DBT_PROJECT}/target/catalog.json\")\n    search_str = 'o=[i(\"manifest\",\"manifest.json\"+t),i(\"catalog\",\"catalog.json\"+t)]'\n    data = (\n        \"o=[{label: 'manifest', data: \"\n        + json.dumps(json_manifest)\n        + \"},{label: 'catalog', data: \"\n        + json.dumps(json_catalog)\n        + \"}]\"\n    )\n\n    merged_content_index = content_index.replace(search_str, data)\n    merged_content_path = f\"{DBT_PROJECT}/target/index_merged.html\"\n    write_file(merged_content_path, merged_content_index)\n\n    logging.info(\"Uploading the file to GCS for static website serving\")\n\n    upload_blob(\"dbt-static-docs-bucket\", merged_content_path, \"index_merged.html\")\n\n    return \"https://storage.cloud.google.com/dbt-static-docs-bucket/index_merged.html\"\n</code></pre>"},{"location":"reference/main/#main.root","title":"<code>root() -&gt; dict[str, str]</code>  <code>async</code>","text":"Source code in <code>dbt_serverless/main.py</code> <pre><code>@app.get(\"/\")\nasync def root() -&gt; dict[str, str]:\n    return {\"message\": \"Hello World\"}\n</code></pre>"},{"location":"reference/main/#main.run","title":"<code>run(env: str = 'dev') -&gt; str</code>  <code>async</code>","text":"Source code in <code>dbt_serverless/main.py</code> <pre><code>@app.get(\"/run\", response_class=PlainTextResponse)\nasync def run(env: str = \"dev\") -&gt; str:\n    _, lines = await execute_and_log_command(RUN_COMMAND.format(ENV=env))\n    return lines\n</code></pre>"},{"location":"reference/main/#main.startup_event","title":"<code>startup_event() -&gt; None</code>  <code>async</code>","text":"Source code in <code>dbt_serverless/main.py</code> <pre><code>@app.on_event(\"startup\")\nasync def startup_event() -&gt; None:\n    content = pkg_resources.read_text(config, \"logging.yml\")\n    # content = read_file(\"config/logging.yml\")\n    logger_config = yaml.load(content, Loader=yaml.FullLoader)\n    logging.config.dictConfig(logger_config)\n</code></pre>"},{"location":"reference/lib/file_helpers/","title":"file_helpers","text":""},{"location":"reference/lib/file_helpers/#lib.file_helpers.FileError","title":"<code>FileError</code>","text":"<p>         Bases: <code>Exception</code></p> Source code in <code>lib/file_helpers.py</code> <pre><code>class FileError(Exception):\n    pass\n</code></pre>"},{"location":"reference/lib/file_helpers/#lib.file_helpers.read_file","title":"<code>read_file(path: str) -&gt; str</code>","text":"Source code in <code>lib/file_helpers.py</code> <pre><code>def read_file(path: str) -&gt; str:\n    try:\n        with open(path, \"r\") as f:\n            return f.read()\n    except (FileNotFoundError, PermissionError):\n        raise FileError(f\"Failed to read file: {path}\")\n</code></pre>"},{"location":"reference/lib/file_helpers/#lib.file_helpers.read_json_file","title":"<code>read_json_file(path: str) -&gt; Any</code>","text":"Source code in <code>lib/file_helpers.py</code> <pre><code>def read_json_file(path: str) -&gt; Any:\n    _, file_extension = os.path.splitext(path)\n    if file_extension != \".json\":\n        raise FileError(f\"Unsupported file format: {file_extension}\")\n    content = read_file(path)\n    try:\n        return json.loads(content)\n    except json.decoder.JSONDecodeError:\n        raise FileError(f\"Failed to parse JSON: {path}\")\n</code></pre>"},{"location":"reference/lib/file_helpers/#lib.file_helpers.upload_blob","title":"<code>upload_blob(bucket_name: str, source_file_name: str, destination_blob_name: str) -&gt; None</code>","text":"<p>Uploads a file to the bucket.</p> Source code in <code>lib/file_helpers.py</code> <pre><code>def upload_blob(bucket_name: str, source_file_name: str, destination_blob_name: str) -&gt; None:\n\"\"\"Uploads a file to the bucket.\"\"\"\n    storage_client = storage.Client()\n    bucket = storage_client.get_bucket(bucket_name)\n    blob = bucket.blob(destination_blob_name)\n    blob.upload_from_filename(source_file_name)\n</code></pre>"},{"location":"reference/lib/file_helpers/#lib.file_helpers.write_file","title":"<code>write_file(path: str, data: str) -&gt; None</code>","text":"Source code in <code>lib/file_helpers.py</code> <pre><code>def write_file(path: str, data: str) -&gt; None:\n    try:\n        with open(path, \"w\") as f:\n            f.write(data)\n    except (FileNotFoundError, PermissionError):\n        raise FileError(f\"Failed to write file: {path}\")\n</code></pre>"},{"location":"reference/lib/subprocess_helpers/","title":"subprocess_helpers","text":""},{"location":"reference/lib/subprocess_helpers/#lib.subprocess_helpers.logger","title":"<code>logger = logging.getLogger(__name__)</code>  <code>module-attribute</code>","text":""},{"location":"reference/lib/subprocess_helpers/#lib.subprocess_helpers.escape_ansi","title":"<code>escape_ansi(line: str) -&gt; str</code>","text":"Source code in <code>lib/subprocess_helpers.py</code> <pre><code>def escape_ansi(line: str) -&gt; str:\n    ansi_escape = re.compile(r\"(?:\\x1B[@-_]|[\\x80-\\x9F])[0-?]*[ -/]*[@-~]\")\n    return ansi_escape.sub(\"\", line)\n</code></pre>"},{"location":"reference/lib/subprocess_helpers/#lib.subprocess_helpers.execute_and_log_command","title":"<code>execute_and_log_command(command: str) -&gt; tuple[Optional[int], str]</code>  <code>async</code>","text":"Source code in <code>lib/subprocess_helpers.py</code> <pre><code>async def execute_and_log_command(command: str) -&gt; tuple[Optional[int], str]:\n    proc = await asyncio.create_subprocess_shell(\n        command, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.STDOUT\n    )\n    stdout, stderr = await proc.communicate()\n    if stdout:\n        line = stdout.decode(\"ascii\").rstrip()\n        logger.info(line)\n    if stderr:\n        line = stdout.decode(\"ascii\").rstrip()\n        logger.error(line)\n    await proc.wait()\n    return proc.returncode, escape_ansi(line)\n</code></pre>"}]}